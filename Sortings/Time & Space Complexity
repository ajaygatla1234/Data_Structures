Time Complexity : 
-It is a measure of the number of basic operations (like comparisons, additions, or multiplications) an algorithm performs in relation to the size of the input data.
1. Constant Time Algorithm (O(1))        : array[0];
2. Linear Time Algorithm (O(n))          : Linear Search
3. Quadratic Time Algorithm (O(n^2))     : Nested Loops (involving the square ) (array scales quadratically with the size of the array.) (Bubble, Insertion, Selection)
4. Logarithmic Time Algorithm (O(log n)) : Many logarithmic time algorithms use a divide-and-conquer approach, where the problem is divided into smaller subproblems.
                                          or
                                          Logarithmic time algorithms often arise in scenarios where hierarchical structures are involved. 
                                          This is because hierarchical structures, like trees, allow for efficient division of the problem space.

Space Complexity:
-Space complexity measures the amount of memory an algorithm requires as a function of the input size. It includes both the memory used for storing data and the space used by auxiliary variables or recursive function calls.
1. Constant Space Algorithm (O(1))        : array[0]; (Bubble, Insertion, Selection, Linear Search)
2. Linear Space Algorithm (O(n))          : 
3. Quadratic Space Algorithm (O(n^2))
4. Recursive Algorithm Space Complexity    : Recursion stack, which grows linearly with the input size. Ex:Factorial
5. Logarithmic Space Complexity (O(log n)) : 





